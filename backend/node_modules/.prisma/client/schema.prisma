// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  password   String
  role       Role        @default(USER)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Restaurant Restaurant?
  NGO        NGO?
  Order      Order[]
  Review     Review[]
}

enum Role {
  USER
  RESTAURANT
  NGO
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Restaurant {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  address   String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  foodItems FoodItem[]
  Order     Order[]
  Review    Review[]
}

model NGO {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  address   String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodItem {
  id           Int         @id @default(autoincrement())
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  name         String
  description  String?
  price        Decimal     @db.Decimal(10, 2)
  quantity     Int
  available    Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  OrderItem    OrderItem[]
  Review       Review[]
}

model Order {
  id     Int  @id @default(autoincrement())
  userId Int // who placed the order (can be NGO or regular USER)
  user   User @relation(fields: [userId], references: [id])

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orderItems OrderItem[]
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  foodItemId Int
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])

  quantity Int
  price    Decimal @db.Decimal(10, 2)
}

model Review {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  restaurantId Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  foodItemId   Int?
  foodItem     FoodItem?   @relation(fields: [foodItemId], references: [id])
  rating       Int // 1â€“5 (validate in app layer)
  comment      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
